
package Tetris;

import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.LinkedBlockingQueue;

public class AI_Tetris {
	public static int[][] board = new int[20][10]; // ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��
	public long TIME = 1; //처占?��?�� ?��?���? ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��
	private long TIME_VALUE = 200;
	private tetris_board t_board;
	public tetris_block t_block;
	public static int GENERATION = 1;
	public static int BEST_LINE = 0;
	public static int CURRENT_LINE = 0;
	public static int CURGENE = 0;
	public static int ROUND = 0;
	public static boolean GAME_END = false; //?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��

    private Random rn; // 랜덤 객체 (블록의 종류를 결정하기 위해 사용)
	private tetris_block blockGenerator = new tetris_block(); // 테트리스 블록 생성기
	
	private Human_Tetris rightBoardManager;
    public  Queue<List<Point>> sharedBlockQueue2 = new LinkedBlockingQueue<>();

	
	public static int[][] rightBoard = new int[20][10]; // 20x10 �겕湲곗?�� 諛곗뿴濡�? �삤?��몄そ 蹂�?�? �깮�꽦
	
	public AI_Tetris() {
        // �깮�꽦�옄�뿉�꽌 t_board?���? ?��?��린�?���빐�빞 ��?�땲�떎.
        this.t_board = new tetris_board(); // tetris_board�쓽 �깮�꽦�옄?���? �솗�씤�븯�꽭�슂.
        this.t_block = new tetris_block();   
    	}
	
	
	   public void refillBlockQueueIfNeeded() {
	        if (sharedBlockQueue2.size() <= 10) {
	            t_block.refillBlockQueueIfNeeded();
	            System.out.println("Block qnew blocks!");
	           Queue<List<Point>> copiedBlockQueue2 = new LinkedBlockingQueue<>(t_block.getQueue());
	     	   sharedBlockQueue2 = copiedBlockQueue2;  // AI 스레드에 큐 복사본 할당
	        }
	      
	    }
	   
public void do_tetris() {

	   Queue<List<Point>> copiedBlockQueue2 = new LinkedBlockingQueue<>(t_block.getQueue());
	   sharedBlockQueue2 = copiedBlockQueue2;  // AI 스레드에 큐 복사본 할당
	 
       while(GAME_END != true) {
            int current_game_score = 0; // ?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��깍옙?��
            
            
            outter: while (true) {
            	refillBlockQueueIfNeeded();
                List<Point> cur_block = sharedBlockQueue2.poll(); // 큐에서 블록 가져오기
       
                
                List<Point> good_position = new ArrayList<>(); // ?��?��?��?��?��?�� ?��?��?��치占?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��
                double big_weight = Integer.MIN_VALUE; // ?��?��?��?��?��?�� ?��?��?��치占?��?�� ?��?��?��?��?��?���? ?��?��깍옙?��
                
                TIME = TIME_VALUE; // ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��깍옙?�� (?��?��?��?�� ?��?��?��?��?��?��)

                 if (GAME_END) {
                	 	endGame(); // 게임 종료 처리
                	 	return;
                 } 
                
                
                // ?��?��?��?��?��?��?���? ?��?��?��?���? ?��?��?��?�� ?��?��?��?��?��몌옙 ?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?���? 찾占?��?��
                for (int j = 0; j < t_block.numOfRotate; j++) {
                    // ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��
                    if (finish(cur_block))
                        break outter; // ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��

                    // ?��?��?��?��?��?�� ?��?��?��?��?���? ?��?��?��?��?��?�� ?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?���? 찾占?��?��
                    Object[] ret = move(cur_block);

                    // ?��?��?��?�� ?��?��?��?��?��?��?��?��?��?���? ?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��
                    if (big_weight < (double) ret[0]) {
                        big_weight = (double) ret[0]; // ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?���? ?��?��?��?��?��?��
                        copyList((List<Point>) ret[1], good_position); // ?��?��?��?��?��?�� ?��?��?���? ?��?��?��?��?��?��
                    }

                    // ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?�� ?��?��?��?��
                    rotate(cur_block);
                    TIME = TIME_VALUE; // ?��?��?��?��?��?�� ?��?��?��?�� ?��?��깍옙?��
                }

                // ?��?��?��?��?��?�� ?��?��?��치占?��?�� ?��?��?��?��?��?��?���? ?��?��몌옙?��?��?��
                drawBlock(good_position);

                // ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��곤옙
                current_game_score += is_complete_line();
                BEST_LINE = Math.max(BEST_LINE, current_game_score); // ?��?��곤옙 ?��?��?��?��?��?�� ?��?��?��?��?��?��
                CURRENT_LINE = current_game_score; // ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��
                t_board.repaint(); // ?��?��?��?��?��?�� ?��?��?��?�� ?��?��몌옙?��?��?��
                
            }
            resetBoard(); // ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��
        } 
}



	private Object[] move(List<Point> b) {
		
		
	    double big_score = Integer.MIN_VALUE; // ?��?��?��?��?��?��?��?��?��?���? ?��?��견듸?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?���? ?��?��?��?��?��?�� ?��?��?��?��?��?��. 처占?��?��?��?��?��?��?��?�� ?��?��?��곤옙?��?��?��?��?��?�� ?��?��깍옙?��?��?��?��?��?��.

	    List<Point> big_score_block = new ArrayList<>(); // ?��?��?��?��?��?��?��?��?�� ?��?��?��치占?��?�� ?��?��?��?�� ?��?��?��?���? ?��?��?��치占?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��.
	    
	    boolean end_down = false, end_left = false; // ?��?��뤄옙?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��?��?��?�� 체크?��?��?��?�� ?��?��뤄옙?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��?��?��.

	    List<Point> block = new ArrayList<>(); // ?��?��?��?��?��?��?���? ?��?��?���? ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��.
	    
	    copyList(b, block); // ?��?��뤄옙 ?��?��?��?��?��?��?���? ?��?��?��?��?��?�� ?��?��?��?���? ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��.
	    move_right(block); // ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��.
	    
	    
	    List<Point> temp_block = new ArrayList<>(); // ?��?��?��?���? ?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��.

	    while (true) {
	        copyList(block, temp_block); // ?��?��?��?��?��?�� ?��?��?��?���? ?��?��?��치占?��?�� ?��?��?��?�� ?��?��?��?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?��.

	        if (end_down = move_down(temp_block)) { // ?��?��?��?��?��?��?���? ?��?��?�� ?��?��?��?�� ?��?��뤄옙?��?��?�� ?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?���? ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?��.
	            drawBlock(temp_block); // ?��?��?��?��?��?�� ?��?��?��치占?��?�� ?��?��?��?��?��?��?���? ?��?��몌옙?��?��?��?��.
	            
	            
	            double temp = Calculator.blockFitness(); 
	            //?��?��?��?��?��?�� ?��?��?��?��?��?���? ?��?��?��?��
	            
	            
	            if (big_score < temp) { // ?��?��?��?��?��?�� ?��?��?��?��?��?��치占?��?�� ?��?��?��?��?��?�� ?��?��?��?�� ?��?��?��?��?��?��치占?��?��?��?��?�� ?�� ?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?��.
	                big_score = temp; // ?��?��?��?��?��?�� ?��?��?��?��?��?��치占?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?��.
	                
	                copyList(temp_block, big_score_block); // ?��?��?��?��?��?��?��?��?�� ?��?��?��?���? ?��?��?��치占?��?�� ?��?��?��?��?��?��?��?��?��?��?��.
	            }
	            
	            try {
	                t_board.repaint(); // ?��?��?��?��?��?��?���? ?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��.
	                Thread.sleep(TIME); // ?��?��?��?��?��?��?��?��?�� ?��?��곤옙 ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?���? ?��?��?��몌옙?��?��?��?�� ?��?��?��?��?��?��?�� ?��?��?��?��?��.
	                deleteBlock(temp_block); // ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?��.
	            } 
	            catch (InterruptedException e) {
	                e.printStackTrace(); // ?��?��?��?��?��?�� ?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��求占�?.
	            }
	        }

	        // ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��.
	        end_left = move_left(block); // ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��.

	        if (end_down && end_left) { // ?��?��?��?��?��?��?���? ?��?��?�� ?��?��?��?�� ?��?��뤄옙?��?��?��?��, ?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��.
	            break;
	        }
	    }

	    Object[] ret = new Object[2]; // ?��?��?��?��?��?��?���? ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��.
	    ret[0] = big_score; // ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��치占?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��.
	    ret[1] = big_score_block; // ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?���? ?��?��?��치占?��?�� ?��?��?��?���? ?��?��?��치占?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��.
	    return ret; // ?��?��?��?��?��?�� ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��.
	}
	
	
	private boolean move_left(List<Point> block) {
	    boolean check = false;
	    for (Point p : block) {
	        check = false;

	        int nx = p.x;
	        int ny = p.y - 1;  // ?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?�� �? ?��?��?��?��

	        // ?��?��?��?��?��?��?�� ?��?��?��치占?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��, ?��?��?��?�� 칸占?��?�� ?��?��뱄옙 ?��?��몌옙 ?��?��?��?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?��?��
	        if (nx < 0 || nx >= board.length || ny < 0 || ny >= board[0].length || board[nx][ny] != 0)
	            break;

	        check = true;
	    }

	    // ?��?��?��?���? ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��
	    if (check) {
	        for (Point p : block) {
	            p.y -= 1;  // ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��
	        }
	        drawBlock(block);
	        return false;  // ?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��?��?�� true, ?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��?��?�� false
	    } else {
	        return true;  // ?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?�� ?��?��?��?���?
	    }
	}

	
	// ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��뤄옙?��?��?�� ?��?��?��?�� ?��?��?��?��?��
	private boolean move_down(List<Point> block) {
		while (true) {
			boolean check = false;
			deleteBlock(block);
			for (Point p : block) {
				check = false;
				int nx = p.x + 1;
				int ny = p.y;

				// ?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��거놂?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?���?
				if (nx < 0 || nx >= board.length || ny < 0 || ny >= board[0].length || board[nx][ny] != 0)
					break;

				check = true;
			}

			if (check) {
				for (Point p : block) {
					p.x += 1;
				}

				drawBlock(block);
			} else
				return true;
		}
	}
	
	// ?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?�� ?��?��?��?��?��
	private void move_right(List<Point> block) {
		    int diff = 1;
		    while (true) {
		        boolean check = false;
		        for (Point p : block) {
		            check = false;
		            int nx = p.x;
		            int ny = p.y + diff;  // ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��뤄옙?��?��?�� y ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��

		            // ?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?���? ?��?��?��?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?���?
		            if (nx < 0 || nx >= board.length || ny < 0 || ny >= board[0].length || board[nx][ny] != 0) {
		                break;
		            }

		            check = true;
		        }

		        // ?��?��?��?��?��?��?��?��?�� ?��?��?��歐占?��?��?���? ?��?��?�� ?��?��?��?��?��?��?�� ?��?��?��?��?��?��
		        if (check) {
		            diff++;  // ?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?���? ?��?��?��?��
		        } else {
		            diff--;  // ?��?��?�� ?��?��?��?�� ?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?�� �? ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��
		            break;
		        }
		    }

		    // ?��?��?��?��?��?��?���? ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��
		    for (Point p : block) {
		        p.y += diff;  // y ?��?��?��?��?��?��?�� diff?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��
		    }
		}
	
		
		
	private int is_complete_line() {
	    // ?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��
	    List<Integer> idx = new ArrayList<>();

	    // ?��?��?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��
	    for (int i = 0; i < board.length; i++) {
	        int count = 0; // ?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?���? 채占?��?��?��?��?�� 칸占?��?�� ?��?��?��?��?��?��

	        // ?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?���? ?��?��?��?��?��?�� ?��?��?��?��
	        for (int j = 0; j < AI_Tetris.board[0].length; j++) {
	            if (AI_Tetris.board[i][j] != 0) {
	                count++; // 0?��?��?�� ?��?��?��?�� �?(?��?��?��?���?)?��?��?�� ?��?��?��?��?��?��?��?��?�� 카占?��?��?��
	            }
	        }

	        // ?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� 채占?��?��?��?��?��?��?��몌옙
	        if (count == AI_Tetris.board[0].length) {
	            // ?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?���? (?��?��?��?���? 칸占?��?�� 0?��?��?��?��?��?�� ?��?��?��?��?��?��)
	            for (int j = 0; j < AI_Tetris.board[0].length; j++) {
	                board[i][j] = 0;
	            }

	            // ?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��곤옙
	            idx.add(i);
	        }
	    }

	    // ?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?���?, ?��?��?�� ?��?��뤄옙?��?��?�� ?��?��?��?�� ?��?��?��溝占?��?��?���? ?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?��?��?��
	    for (int i : idx) {
	        // ?��?��?��?��?��?��?�� ?��?��?��?��?��븝옙?��?��?�� ?��?��?��?��?��?�� ?��?��?��?�� ?��?��?��?��?��?��?���? ?��?��뤄옙?��?��?�� ?��?��?�� 칸占?��?�� ?��?��?��?��
	        for (int j = i - 1; j >= 0; j--) {
	            // ?��?��?��?�� ?��?��?��?��?��?�� ?��?��?�� 칸占?��?�� ?��?��?��?��
	            for (int k = 0; k < AI_Tetris.board[j].length; k++) {
	                if (board[j][k] != 0) {
	                    // ?��?��?��?��?��?��?���? ?��?��?��몌옙, ?��?��?�� �? ?��?��뤄옙?��?��?�� ?��?��?��?��
	                    board[j + 1][k] = board[j][k];
	                    // ?��?��?��?��?��?�� 칸占?��?�� ?��?��?��?��?��?��娩占�?
	                    board[j][k] = 0;
	                }
	            }
	        }
	    }

	    // ?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��
	    return idx.size();
	}
	
	
	
	
	// ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?��?��
		private void resetBoard() {
			for (int i = 0; i < board.length; i++) {
				for (int j = 0; j < board[i].length; j++) {
					board[i][j] = 0;
				}
			}
		}
		
		
	
	//?��?��?��?��?��?�� ?��?��?��?��?��?��, ?��?��?��?��?��?��?��?��?��?��?��?��?�� ?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?���? ?��?��?��
		private boolean finish(List<Point> block) {
			for (Point p : block) {
				if (board[p.x][p.y] != 0)
				{
					GAME_END = true;
					
				}
				
				if(CURRENT_LINE >= 1000) {
					GAME_END = true;
					
				}
			}
			return false;
		}
		

		
		private void endGame() {
	 	    // �ʿ信 ���� �߰� �۾�: UI �˾�, ���� ��ư Ȱ��ȭ, ���� ���� ��
	 	    if(CURRENT_LINE >= 1000) {
	 	    	 javax.swing.JOptionPane.showMessageDialog(null, "AI Win!");
	 	    }
	 	    else {
	 	    	javax.swing.JOptionPane.showMessageDialog(null, "Game Over!\n AI Lose");
	 	    }
	 	    
	 	    System.exit(0); // ���α׷� ���� (�ʿ信 ���� �ٸ��� ���� ����)
	 	}

	
	// ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��몌옙?��?��?�� ?��?��?��?��?��
	public void drawBlock(List<Point> block) {
	    
	 	   rn = new Random(); // 랜덤 객체 초기화
	 	   int j = rn.nextInt(7) + 1; // 1부터 7까지 랜덤으로 블록 종류 결정
	       int color = j; // 결정된 블록 종류에 해당하는 색상 설정
	 		
		for (Point p : block) {
			board[p.x][p.y] = color;
		}
	}

	
	
	
	// ?��?��?��?��?��?��?��?��?��?�� ?��?��?��?��?��?�� ?��?��?��?��?��?��?���? ?��?��?��?��?��
	private void deleteBlock(List<Point> block) {
		for (Point p : block) {
			board[p.x][p.y] = 0;
		}
	}

	
	//?��?��몌옙?��?��?��?�� ?��?��?�� ?��?��?��?��
	private void rotate(List<Point> block) {
		int pivot_x = block.get(1).x;
		int pivot_y = block.get(1).y;

		for (Point p : block) {
			p.x = p.x - pivot_x;
			p.y = p.y - pivot_y;
		}

		int x_min = 0, x_max = 19, y_max = 9, y_min = 0;
		for (Point p : block) {
			int nx = p.x * 0 + -1 * p.y;
			int ny = p.x * 1 + 0 * p.y;

			p.x = nx + pivot_x;
			p.y = ny + pivot_y;

			if (p.x < 0)
				x_min = Math.min(p.x, x_min);

			if (p.x >= 20)
				x_max = Math.max(p.x, x_max);

			if (p.y < 0)
				y_min = Math.min(p.y, y_min);

			if (p.y >= 10)
				y_max = Math.max(p.y, y_max);
		}

		x_min = Math.abs(x_min);
		y_min = Math.abs(y_min);

		for (Point p : block) {
			p.x += x_min;
			p.y += y_min;
		}

		x_max -= 19;
		y_max -= 9;

		for (Point p : block) {
			p.x -= x_max;
			p.y -= y_max;
		}

		int min = Integer.MAX_VALUE;

		for (Point p : block) {
			min = Math.min(min, p.x);
		}

		for (Point p : block) {
			p.x -= min;
		}

	}
	
	
	private void copyList(List<Point> src, List<Point> dest) {
		dest.clear();
		for (Point p : src) {
			dest.add(new Point(p.x, p.y));
		}
	}
	
	
	public long getTIME() {
	    return TIME;
	}
	
	public void setTIME(long newTime) {
		TIME_VALUE = newTime;    
	}
}
